{
  "name": "FantasyFootballAssistantAI",
  "tagline": "An implementation of a neural network to predict NFL player performance",
  "body": "# Introduction\r\nTo be successful at fantasy football, you must have luck, a good amount of free time, or an uncanny ability to notice patterns within vast amounts of data. I don’t have any of those. This project is an attempt to redeem my current fantasy football team, and save time and frustration in my participation in future leagues. To do this, I will have a neural network do the work for me.\r\n\r\n### \r\nI am fairly new to the fantasy football scene. Football has always been an interest of mine, but it wasn’t until last year that I started participating in fantasy football leagues. The first thing I noticed upon joining my first league, is there are a great number of statistics for each player. These statistics range from the obvious (number of passing completions) to the obscure (number of blocked kicks that resulted in touchdowns). The objective is to use these statistics to decide who you should add or drop from your fantasy team. The goal is to build a team of players that will outperform the players in the opposing team in the upcoming games. The players are assigned “fantasy points” as a measure of their performance each week. \r\n\r\n### \r\nNeural networks are not only great for noticing statistical patterns, they can also process a lot of data very quickly. I have created a program that pulls NFL statistics from an API and implemented a neural network that can process that data to predict player performance. \r\n\r\n# Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n# Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n# Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n# Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}